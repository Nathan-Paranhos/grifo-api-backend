const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env.development') });

const setupDatabase = async () => {
  console.log('üöÄ Iniciando setup do banco de dados...');
  
  // Configura√ß√£o do banco
  const config = {
    host: process.env.DATABASE_HOST || 'localhost',
    port: process.env.DATABASE_PORT || 5432,
    user: process.env.DATABASE_USER || 'postgres',
    password: process.env.DATABASE_PASSWORD || 'password',
    database: 'postgres' // Conecta ao banco padr√£o primeiro
  };

  const client = new Client(config);
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado ao PostgreSQL');
    
    // Criar banco de dados se n√£o existir
    const dbName = process.env.DATABASE_NAME || 'grifo_dev';
    
    try {
      await client.query(`CREATE DATABASE ${dbName}`);
      console.log(`‚úÖ Banco de dados '${dbName}' criado`);
    } catch (error) {
      if (error.code === '42P04') {
        console.log(`‚ÑπÔ∏è  Banco de dados '${dbName}' j√° existe`);
      } else {
        throw error;
      }
    }
    
    await client.end();
    
    // Conectar ao banco espec√≠fico e executar schema
    const dbClient = new Client({
      ...config,
      database: dbName
    });
    
    await dbClient.connect();
    console.log(`‚úÖ Conectado ao banco '${dbName}'`);
    
    // Ler e executar schema SQL
    const schemaPath = path.resolve(__dirname, '../database/schema.sql');
    const schemaSql = fs.readFileSync(schemaPath, 'utf8');
    
    await dbClient.query(schemaSql);
    console.log('‚úÖ Schema do banco de dados aplicado com sucesso');
    
    // Setup conclu√≠do - banco de dados pronto para produ√ß√£o
    
    await dbClient.end();
    console.log('üéâ Setup do banco de dados conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o setup:', error.message);
    console.error('üìã Detalhes do erro:', error);
    console.error('üîç Stack trace:', error.stack);
    process.exit(1);
  }
};

// Executar setup
setupDatabase();